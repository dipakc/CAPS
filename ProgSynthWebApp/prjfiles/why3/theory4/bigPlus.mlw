
module BigPlus

	use import int.Int
	(*use import int.MinMax*)
	use HighOrd as HO

	use import capsUtil.CapsUtil as CapsUtil
	
	constant bigPlus: (int -> bool) -> (int -> int) -> int
	
	axiom onePointPlus:
		forall r: int -> bool, t: int -> int, x: int.
			one_point r x -> 
				bigPlus r t = t x 
		
	axiom emptyRangePlus:
		forall r: int -> bool, t: int -> int.
			empty_range r -> 
				bigPlus r t = 0 
	
	axiom splitRangePlus:
		forall r r1 r2: int -> bool, t t1 t2: int -> int.
			(* non_empty_range r -> non_empty_range r1 -> non_empty_range r2 ->*)
			is_union_of r r1 r2 -> 
			disjoint r1 r2 ->
			are_same t t1 -> are_same t t2 ->
				bigPlus r t = (bigPlus r1 t1) + (bigPlus r2 t2)		
	
	axiom splitRangeRightPlus:
		forall r r1: int -> bool, t t1 t2: int -> int, v: int.
			(* non_empty_range r -> non_empty_range r1 -> *)
			is_union_of_v r r1 v /\ not(r1 v)->
			are_same t t1 -> are_same t t2 ->
				bigPlus r t = (bigPlus r1 t1) + (t2 v) 
				
end
